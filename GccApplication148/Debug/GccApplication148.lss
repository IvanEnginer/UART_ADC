
GccApplication148.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000cc  00000140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008a3  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000008d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000229  00000000  00000000  00000902  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000163  00000000  00000000  00000b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001d1  00000000  00000000  00000c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000e60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000149  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000021  00000000  00000000  00000fed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000100e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z8read_adch>:

// Read the 8 most significant bits
// of the AD conversion result
unsigned char read_adc(unsigned char adc_input)
{
	ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
  6c:	80 66       	ori	r24, 0x60	; 96
  6e:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  70:	8a e1       	ldi	r24, 0x1A	; 26
  72:	8a 95       	dec	r24
  74:	f1 f7       	brne	.-4      	; 0x72 <_Z8read_adch+0x6>
  76:	00 c0       	rjmp	.+0      	; 0x78 <_Z8read_adch+0xc>
	// Delay needed for the stabilization of the ADC input voltage
	_delay_us(10);
	// Start the AD conversion
	ADCSRA|=0x40;
  78:	36 9a       	sbi	0x06, 6	; 6
	// Wait for the AD conversion to complete
	while ((ADCSRA & 0x10)==0);
  7a:	34 9b       	sbis	0x06, 4	; 6
  7c:	fe cf       	rjmp	.-4      	; 0x7a <_Z8read_adch+0xe>
	ADCSRA|=0x10;
  7e:	34 9a       	sbi	0x06, 4	; 6
	return ADCH;
  80:	85 b1       	in	r24, 0x05	; 5
}
  82:	08 95       	ret

00000084 <_Z12uart_putcharh>:

void uart_putchar( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
  84:	5d 9b       	sbis	0x0b, 5	; 11
  86:	fe cf       	rjmp	.-4      	; 0x84 <_Z12uart_putcharh>
	;
	/* Put data into buffer, sends the data */
	UDR = data;
  88:	8c b9       	out	0x0c, r24	; 12
  8a:	08 95       	ret

0000008c <main>:
}


int main(void)
{
	DDRA=0;
  8c:	1a ba       	out	0x1a, r1	; 26
	PORTA=0;
  8e:	1b ba       	out	0x1b, r1	; 27
	DDRD=0;
  90:	11 ba       	out	0x11, r1	; 17
	PORTD=0;
  92:	12 ba       	out	0x12, r1	; 18
	// Communication Parameters: 8 Data, 1 Stop, No Parity
	// USART Receiver: Off
	// USART Transmitter: On
	// USART Mode: Asynchronous
	// USART Baud Rate: 9600
	UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
  94:	1b b8       	out	0x0b, r1	; 11
	UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
  96:	88 e0       	ldi	r24, 0x08	; 8
  98:	8a b9       	out	0x0a, r24	; 10
	UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
  9a:	86 e8       	ldi	r24, 0x86	; 134
  9c:	80 bd       	out	0x20, r24	; 32
	UBRRH=0x00;
  9e:	10 bc       	out	0x20, r1	; 32
	UBRRL=0x33;
  a0:	93 e3       	ldi	r25, 0x33	; 51
  a2:	99 b9       	out	0x09, r25	; 9
	// ADC initialization
	// ADC Clock frequency: 125,000 kHz
	// ADC Voltage Reference: AVCC pin
	// Only the 8 most significant bits of
	// the AD conversion result are used
	ADMUX=ADC_VREF_TYPE & 0xff;
  a4:	90 e6       	ldi	r25, 0x60	; 96
  a6:	97 b9       	out	0x07, r25	; 7
	ADCSRA=0x86;
  a8:	86 b9       	out	0x06, r24	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	80 e7       	ldi	r24, 0x70	; 112
  ae:	92 e0       	ldi	r25, 0x02	; 2
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x24>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x2e>
  ba:	00 00       	nop

	
	while(1)
	{
		_delay_ms(100);
		uart_putchar(read_adc(0));
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	0e 94 36 00 	call	0x6c	; 0x6c <_Z8read_adch>
  c2:	0e 94 42 00 	call	0x84	; 0x84 <_Z12uart_putcharh>
  c6:	f1 cf       	rjmp	.-30     	; 0xaa <main+0x1e>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
